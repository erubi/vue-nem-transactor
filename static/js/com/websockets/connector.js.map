{"version":3,"sources":["../../../src/com/websockets/connector.js"],"names":["create","endpoint","address","replace","toUpperCase","socket","undefined","stompClient","timeoutReconnect","connectionAttempts","connect","close","Promise","resolve","reject","self","host","port","over","debug","timeoutFix","setTimeout","frame","clearTimeout","err","console","log","onclose","e","module","exports"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AAEA;;;;;;;;AAQA,IAAIA,SAAS,SAATA,MAAS,CAASC,QAAT,EAAmBC,OAAnB,EAA4B;AACxC,QAAO;AACND,YAAUA,QADJ;AAENC,WAASA,QAAQC,OAAR,CAAgB,IAAhB,EAAsB,EAAtB,EAA0BC,WAA1B,EAFH;AAGNC,UAAQC,SAHF;AAIAC,eAAaD,SAJb;AAKAE,oBAAkBF,SALlB;AAMAG,sBAAoB,CANpB;AAOAC,WAASA,OAPT;AAQAC,SAAOA;AARP,EAAP;AAUA,CAXD;;AAaA;;;;;;AAMA,IAAID,UAAU,SAAVA,OAAU,GAAW;AAAA;;AACxB,QAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,MAAIC,YAAJ;AACA,MAAG,eAAH,EAAmB;AAClBA,QAAKV,MAAL,GAAc,2BAAeU,KAAKd,QAAL,CAAce,IAAd,GAAqB,GAArB,GAA2BD,KAAKd,QAAL,CAAcgB,IAAzC,GAAgD,aAA/D,CAAd;AACA,GAFD,MAEO;AACNF,QAAKV,MAAL,GAAc,mBAAkBU,KAAKd,QAAL,CAAce,IAAd,GAAqB,GAArB,GAA2BD,KAAKd,QAAL,CAAcgB,IAAzC,GAAgD,aAAlE,CAAd;AACA;AACEF,OAAKR,WAAL,GAAmB,aAAMW,IAAN,CAAWH,KAAKV,MAAhB,CAAnB;AACAU,OAAKR,WAAL,CAAiBY,KAAjB,GAAyB,KAAzB;AACA;AACA,MAAIC,aAAaC,WAAW,YAAM;AACjCP,UAAO,kCAAP;AACA,GAFgB,EAEd,KAFc,CAAjB;AAGAC,OAAKR,WAAL,CAAiBG,OAAjB,CAAyB,EAAzB,EAA6B,UAASY,KAAT,EAAgB;AAC5C;AACAC,gBAAaH,UAAb;AACAP,WAAQ,IAAR;AACA,GAJD,EAIG,UAACW,GAAD,EAAS;AACX;AACAD,gBAAaH,UAAb;AACA;AACAL,QAAKN,kBAAL;AACG;AACAM,QAAKP,gBAAL,GAAwBa,WAAW,YAAM;AACxC,QAAGN,KAAKN,kBAAL,GAA0B,CAA7B,EAAgC;AAC/B;AACAM,UAAKN,kBAAL,GAA0B,CAA1B;AACA;AACAK,YAAO,gCAAP;AACA,KALD,MAKO;AACNW,aAAQC,GAAR,CAAY,wBAAZ;AACA;AACAb,aAAQE,KAAKL,OAAL,EAAR;AACH;AACD,IAX0B,EAWxB,IAXwB,CAAxB;AAYN,GAtBE;AAuBH,EApCM,CAAP;AAqCA,CAtCD;;AAwCA;;;AAGA,IAAIC,QAAQ,SAARA,KAAQ,GAAW;AACnB,KAAII,OAAO,IAAX;AACAU,SAAQC,GAAR,CAAY,mBAAkBX,KAAKd,QAAL,CAAce,IAAhC,GAAsC,sBAAlD;AACA;AACAO,cAAaR,KAAKP,gBAAlB;AACAO,MAAKV,MAAL,CAAYM,KAAZ;AACAI,MAAKV,MAAL,CAAYsB,OAAZ,GAAsB,UAASC,CAAT,EAAY;AAC9BH,UAAQC,GAAR,CAAYE,CAAZ;AACH,EAFD;AAGH,CATD;;AAWAC,OAAOC,OAAP,GAAiB;AAChB9B;AADgB,CAAjB","file":"connector.js","sourcesContent":["import { SockJS as SockJSBrowser } from '../../external/sockjs-0.3.4';\nimport SockJSNode from 'sockjs-client';\nimport { Stomp } from '../../external/stomp';\n\n/**\n * Create a connector object\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n *\n * @return {object} - A connector object\n */\nlet create = function(endpoint, address) {\n\treturn {\n\t\tendpoint: endpoint,\n\t\taddress: address.replace(/-/g, \"\").toUpperCase(),\n\t\tsocket: undefined,\n        stompClient: undefined,\n        timeoutReconnect: undefined,\n        connectionAttempts: 0,\n        connect: connect,\n        close: close\n\t}\n}\n\n/**\n * Tries to establish a connection. \n * After 10 failed attempts the promise will reject\n *\n * @return {promise} - A resolved or rejected promise\n */\nlet connect = function() {\n\treturn new Promise((resolve, reject) => {\n\t\tvar self = this;\n\t\tif(!SockJSBrowser) {\n\t\t\tself.socket = new SockJSNode(self.endpoint.host + ':' + self.endpoint.port + '/w/messages');\n\t\t} else {\n\t\t\tself.socket = new SockJSBrowser(self.endpoint.host + ':' + self.endpoint.port + '/w/messages');\n\t\t}\n\t    self.stompClient = Stomp.over(self.socket);\n\t    self.stompClient.debug = false;\n\t    // Timeout fix in case NIS socket is not responding\n\t    let timeoutFix = setTimeout(() => {\n\t    \treject(\"Not responding after 10 seconds!\");\n\t    }, 10000);\n\t    self.stompClient.connect({}, function(frame) {\n\t    \t// Clear the timeout fix\n\t    \tclearTimeout(timeoutFix);\n\t\t    resolve(true);\n\t    }, (err) => {\n\t    \t// Clear the timeout fix\n\t    \tclearTimeout(timeoutFix);\n\t    \t// Add one attempt\n\t    \tself.connectionAttempts++;\n\t        // Try to reconnect\n\t        self.timeoutReconnect = setTimeout(() => {\n\t        \tif(self.connectionAttempts > 9) {\n\t        \t\t// Reset connection attempts\n\t        \t\tself.connectionAttempts = 0;\n\t        \t\t// Reject\n\t        \t\treject(\"10 connection attempts failed!\");\n\t        \t} else {\n\t\t\t        console.log(\"Trying to reconnect...\");\n\t\t\t        // Tries to connect again\n\t\t\t        resolve(self.connect());\n\t\t    \t}\n\t\t    }, 1000);\n\t\t});\n\t});\n}\n\n/**\n * Close a connection\n */\nlet close = function() {\n    var self = this;\n    console.log(\"Connection to \"+ self.endpoint.host +\" must be closed now.\");\n    // Stop trying to reconnect\n    clearTimeout(self.timeoutReconnect);\n    self.socket.close();\n    self.socket.onclose = function(e) {\n        console.log(e);\n    };\n}\n\nmodule.exports = {\n\tcreate\n}"]}